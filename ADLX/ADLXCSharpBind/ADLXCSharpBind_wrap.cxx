/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ADLX(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ADLX(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ADLX(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <Windows.h>
#include "../SDK/Include/ADLXDefines.h"
#include "../SDK/Include/ICollections.h"
#include "../SDK/Include/IDisplays.h"
#include "../SDK/Include/ISystem.h"
#include "../SDK/Include/ILog.h"
#include "../SDK/ADLXHelper/Windows/Cpp/ADLXHelper.h"

typedef     int64_t             adlx_int64;
typedef     int32_t             adlx_int32;
typedef     int16_t             adlx_int16;
typedef     int8_t              adlx_int8;
typedef     uint64_t            adlx_uint64;
typedef     uint32_t            adlx_uint32;
typedef     uint16_t            adlx_uint16;
typedef     uint8_t             adlx_uint8;
typedef     size_t              adlx_size;
typedef     void*               adlx_handle;
typedef     double              adlx_double;
typedef     float               adlx_float;
typedef     void                adlx_void;
typedef     long                adlx_long;
typedef     adlx_int32          adlx_int;
typedef     unsigned long       adlx_ulong;
typedef     adlx_uint32         adlx_uint;
typedef     bool                adlx_bool;
typedef wchar_t WCHAR;    // wc,   16-bit UNICODE character
typedef WCHAR TCHAR;

// Microsoft
#define ADLX_CORE_LINK          __declspec(dllexport)
#define ADLX_STD_CALL           __stdcall
#define ADLX_CDECL_CALL         __cdecl
#define ADLX_FAST_CALL          __fastcall
#define ADLX_INLINE              __inline
#define ADLX_FORCEINLINE         __forceinline
#define ADLX_NO_VTABLE          __declspec(novtable)

//IID's
#define ADLX_DECLARE_IID(X) static ADLX_INLINE const wchar_t* IID()  { return X; }
#define ADLX_IS_IID(X, Y) (!wcscmp (X, Y))
#define ADLX_DECLARE_ITEM_IID(X) static ADLX_INLINE const wchar_t* ITEM_IID()  { return X; }

using namespace adlx;


#include <stdint.h>		// Use the C99 official header


static adlx_int *new_intP(void) { 
  return new adlx_int(); 
}

static adlx_int *copy_intP(adlx_int value) { 
  return new adlx_int(value); 
}

static void delete_intP(adlx_int *obj) { 
  delete obj; 
}

static void intP_assign(adlx_int *obj, adlx_int value) {
  *obj = value;
}

static adlx_int intP_value(adlx_int *obj) {
  return *obj;
}


static double *new_doubleP(void) { 
  return new double(); 
}

static double *copy_doubleP(double value) { 
  return new double(value); 
}

static void delete_doubleP(double *obj) { 
  delete obj; 
}

static void doubleP_assign(double *obj, double value) {
  *obj = value;
}

static double doubleP_value(double *obj) {
  return *obj;
}


static adlx_uint *new_uintP(void) { 
  return new adlx_uint(); 
}

static adlx_uint *copy_uintP(adlx_uint value) { 
  return new adlx_uint(value); 
}

static void delete_uintP(adlx_uint *obj) { 
  delete obj; 
}

static void uintP_assign(adlx_uint *obj, adlx_uint value) {
  *obj = value;
}

static adlx_uint uintP_value(adlx_uint *obj) {
  return *obj;
}


static ADLX_DISPLAY_TYPE *new_displayTypeP(void) { 
  return new ADLX_DISPLAY_TYPE(); 
}

static ADLX_DISPLAY_TYPE *copy_displayTypeP(ADLX_DISPLAY_TYPE value) { 
  return new ADLX_DISPLAY_TYPE(value); 
}

static void delete_displayTypeP(ADLX_DISPLAY_TYPE *obj) { 
  delete obj; 
}

static void displayTypeP_assign(ADLX_DISPLAY_TYPE *obj, ADLX_DISPLAY_TYPE value) {
  *obj = value;
}

static ADLX_DISPLAY_TYPE displayTypeP_value(ADLX_DISPLAY_TYPE *obj) {
  return *obj;
}


static ADLX_DISPLAY_CONNECTOR_TYPE *new_displayConnectTypeP(void) { 
  return new ADLX_DISPLAY_CONNECTOR_TYPE(); 
}

static ADLX_DISPLAY_CONNECTOR_TYPE *copy_displayConnectTypeP(ADLX_DISPLAY_CONNECTOR_TYPE value) { 
  return new ADLX_DISPLAY_CONNECTOR_TYPE(value); 
}

static void delete_displayConnectTypeP(ADLX_DISPLAY_CONNECTOR_TYPE *obj) { 
  delete obj; 
}

static void displayConnectTypeP_assign(ADLX_DISPLAY_CONNECTOR_TYPE *obj, ADLX_DISPLAY_CONNECTOR_TYPE value) {
  *obj = value;
}

static ADLX_DISPLAY_CONNECTOR_TYPE displayConnectTypeP_value(ADLX_DISPLAY_CONNECTOR_TYPE *obj) {
  return *obj;
}


static ADLX_DISPLAY_SCAN_TYPE *new_displayScanTypeP(void) { 
  return new ADLX_DISPLAY_SCAN_TYPE(); 
}

static ADLX_DISPLAY_SCAN_TYPE *copy_displayScanTypeP(ADLX_DISPLAY_SCAN_TYPE value) { 
  return new ADLX_DISPLAY_SCAN_TYPE(value); 
}

static void delete_displayScanTypeP(ADLX_DISPLAY_SCAN_TYPE *obj) { 
  delete obj; 
}

static void displayScanTypeP_assign(ADLX_DISPLAY_SCAN_TYPE *obj, ADLX_DISPLAY_SCAN_TYPE value) {
  *obj = value;
}

static ADLX_DISPLAY_SCAN_TYPE displayScanTypeP_value(ADLX_DISPLAY_SCAN_TYPE *obj) {
  return *obj;
}


static ADLX_GPU_TYPE *new_gpuTypeP(void) { 
  return new ADLX_GPU_TYPE(); 
}

static ADLX_GPU_TYPE *copy_gpuTypeP(ADLX_GPU_TYPE value) { 
  return new ADLX_GPU_TYPE(value); 
}

static void delete_gpuTypeP(ADLX_GPU_TYPE *obj) { 
  delete obj; 
}

static void gpuTypeP_assign(ADLX_GPU_TYPE *obj, ADLX_GPU_TYPE value) {
  *obj = value;
}

static ADLX_GPU_TYPE gpuTypeP_value(ADLX_GPU_TYPE *obj) {
  return *obj;
}


static adlx_size *new_adlx_sizeP(void) { 
  return new adlx_size(); 
}

static adlx_size *copy_adlx_sizeP(adlx_size value) { 
  return new adlx_size(value); 
}

static void delete_adlx_sizeP(adlx_size *obj) { 
  delete obj; 
}

static void adlx_sizeP_assign(adlx_size *obj, adlx_size value) {
  *obj = value;
}

static adlx_size adlx_sizeP_value(adlx_size *obj) {
  return *obj;
}


static IADLXDisplayServices* *new_displaySerP_Ptr() { 
  return new IADLXDisplayServices*(); 
}

static IADLXDisplayServices* *copy_displaySerP_Ptr(IADLXDisplayServices* value) { 
  return new IADLXDisplayServices*(value); 
}

static void delete_displaySerP_Ptr(IADLXDisplayServices* *obj) { 
  if (*obj) delete *obj; 
}

static void displaySerP_Ptr_assign(IADLXDisplayServices* *obj, IADLXDisplayServices* value) {
  *obj = value;
}

static IADLXDisplayServices* displaySerP_Ptr_value(IADLXDisplayServices* *obj) {
  return *obj;
}


static IADLXDisplayList* *new_displayListP_Ptr() { 
  return new IADLXDisplayList*(); 
}

static IADLXDisplayList* *copy_displayListP_Ptr(IADLXDisplayList* value) { 
  return new IADLXDisplayList*(value); 
}

static void delete_displayListP_Ptr(IADLXDisplayList* *obj) { 
  if (*obj) delete *obj; 
}

static void displayListP_Ptr_assign(IADLXDisplayList* *obj, IADLXDisplayList* value) {
  *obj = value;
}

static IADLXDisplayList* displayListP_Ptr_value(IADLXDisplayList* *obj) {
  return *obj;
}


static IADLXDisplay* *new_displayP_Ptr() { 
  return new IADLXDisplay*(); 
}

static IADLXDisplay* *copy_displayP_Ptr(IADLXDisplay* value) { 
  return new IADLXDisplay*(value); 
}

static void delete_displayP_Ptr(IADLXDisplay* *obj) { 
  if (*obj) delete *obj; 
}

static void displayP_Ptr_assign(IADLXDisplay* *obj, IADLXDisplay* value) {
  *obj = value;
}

static IADLXDisplay* displayP_Ptr_value(IADLXDisplay* *obj) {
  return *obj;
}


static IADLXDisplayChangedHandling* *new_displayChangeHandlP_Ptr() { 
  return new IADLXDisplayChangedHandling*(); 
}

static IADLXDisplayChangedHandling* *copy_displayChangeHandlP_Ptr(IADLXDisplayChangedHandling* value) { 
  return new IADLXDisplayChangedHandling*(value); 
}

static void delete_displayChangeHandlP_Ptr(IADLXDisplayChangedHandling* *obj) { 
  if (*obj) delete *obj; 
}

static void displayChangeHandlP_Ptr_assign(IADLXDisplayChangedHandling* *obj, IADLXDisplayChangedHandling* value) {
  *obj = value;
}

static IADLXDisplayChangedHandling* displayChangeHandlP_Ptr_value(IADLXDisplayChangedHandling* *obj) {
  return *obj;
}


static IADLXGPUList* *new_gpuListP_Ptr() { 
  return new IADLXGPUList*(); 
}

static IADLXGPUList* *copy_gpuListP_Ptr(IADLXGPUList* value) { 
  return new IADLXGPUList*(value); 
}

static void delete_gpuListP_Ptr(IADLXGPUList* *obj) { 
  if (*obj) delete *obj; 
}

static void gpuListP_Ptr_assign(IADLXGPUList* *obj, IADLXGPUList* value) {
  *obj = value;
}

static IADLXGPUList* gpuListP_Ptr_value(IADLXGPUList* *obj) {
  return *obj;
}


static IADLXGPU* *new_gpuP_Ptr() { 
  return new IADLXGPU*(); 
}

static IADLXGPU* *copy_gpuP_Ptr(IADLXGPU* value) { 
  return new IADLXGPU*(value); 
}

static void delete_gpuP_Ptr(IADLXGPU* *obj) { 
  if (*obj) delete *obj; 
}

static void gpuP_Ptr_assign(IADLXGPU* *obj, IADLXGPU* value) {
  *obj = value;
}

static IADLXGPU* gpuP_Ptr_value(IADLXGPU* *obj) {
  return *obj;
}


static char* *new_charP_Ptr() { 
  return new char*(); 
}

static char* *copy_charP_Ptr(char* value) { 
  return new char*(value); 
}

static void delete_charP_Ptr(char* *obj) { 
  if (*obj) delete *obj; 
}

static void charP_Ptr_assign(char* *obj, char* value) {
  *obj = value;
}

static char* charP_Ptr_value(char* *obj) {
  return *obj;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ADLXCSharpBind_wrap.h"

SwigDirector_IADLXDisplayListChangedListener::SwigDirector_IADLXDisplayListChangedListener() : adlx::IADLXDisplayListChangedListener(), Swig::Director() {
  swig_init_callbacks();
}

adlx_bool SwigDirector_IADLXDisplayListChangedListener::OnDisplayListChanged(adlx::IADLXDisplayList *pNewDisplay) {
  adlx_bool c_result = SwigValueInit< adlx_bool >() ;
  unsigned int jresult = 0 ;
  void * jpNewDisplay = 0 ;
  
  if (!swig_callbackOnDisplayListChanged) {
    Swig::DirectorPureVirtualException::raise("adlx::IADLXDisplayListChangedListener::OnDisplayListChanged");
    return c_result;
  } else {
    jpNewDisplay = (void *) pNewDisplay; 
    jresult = (unsigned int) swig_callbackOnDisplayListChanged(jpNewDisplay);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_IADLXDisplayListChangedListener::swig_connect_director(SWIG_Callback0_t callbackOnDisplayListChanged) {
  swig_callbackOnDisplayListChanged = callbackOnDisplayListChanged;
}

void SwigDirector_IADLXDisplayListChangedListener::swig_init_callbacks() {
  swig_callbackOnDisplayListChanged = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT long SWIGSTDCALL CSharp_adlx_atomic_inc(void * jarg1) {
  long jresult ;
  adlx_long *arg1 = (adlx_long *) 0 ;
  adlx_long result;
  
  arg1 = (adlx_long *)jarg1; 
  result = (adlx_long)adlx_atomic_inc(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_adlx_atomic_dec(void * jarg1) {
  long jresult ;
  adlx_long *arg1 = (adlx_long *) 0 ;
  adlx_long result;
  
  arg1 = (adlx_long *)jarg1; 
  result = (adlx_long)adlx_atomic_dec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_adlx_load_library(void * jarg1) {
  void * jresult ;
  TCHAR *arg1 = (TCHAR *) 0 ;
  adlx_handle result;
  
  arg1 = (TCHAR *)jarg1; 
  result = (adlx_handle)adlx_load_library((wchar_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_adlx_free_library(void * jarg1) {
  int jresult ;
  adlx_handle arg1 = (adlx_handle) 0 ;
  int result;
  
  arg1 = (adlx_handle)jarg1; 
  result = (int)adlx_free_library(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_adlx_get_proc_address(void * jarg1, char * jarg2) {
  void * jresult ;
  adlx_handle arg1 = (adlx_handle) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  arg1 = (adlx_handle)jarg1; 
  arg2 = (char *)jarg2; 
  result = (void *)adlx_get_proc_address(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_USER_3DLUT_NUM_POINTS_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXInterface_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXInterface::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IADLXInterface_Acquire(void * jarg1) {
  long jresult ;
  adlx::IADLXInterface *arg1 = (adlx::IADLXInterface *) 0 ;
  adlx_long result;
  
  arg1 = (adlx::IADLXInterface *)jarg1; 
  result = (adlx_long)(arg1)->Acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IADLXInterface_Release(void * jarg1) {
  long jresult ;
  adlx::IADLXInterface *arg1 = (adlx::IADLXInterface *) 0 ;
  adlx_long result;
  
  arg1 = (adlx::IADLXInterface *)jarg1; 
  result = (adlx_long)(arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXInterface_QueryInterface(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXInterface *arg1 = (adlx::IADLXInterface *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void **arg3 = (void **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXInterface *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (void **)jarg3; 
  result = (ADLX_RESULT)(arg1)->QueryInterface((wchar_t const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXInterface(void * jarg1) {
  adlx::IADLXInterface *arg1 = (adlx::IADLXInterface *) 0 ;
  
  arg1 = (adlx::IADLXInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXList_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXList::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXList_ITEM_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXList::ITEM_IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXList_Size(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  adlx_uint result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  result = (adlx_uint)(arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXList_Empty(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  result = (adlx_bool)(arg1)->Empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXList_Begin(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  adlx_uint result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  result = (adlx_uint)(arg1)->Begin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXList_End(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  adlx_uint result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  result = (adlx_uint)(arg1)->End();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXList_At(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  adlx_uint arg2 ;
  adlx::IADLXInterface **arg3 = (adlx::IADLXInterface **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  arg2 = (adlx_uint)jarg2; 
  arg3 = (adlx::IADLXInterface **)jarg3; 
  result = (ADLX_RESULT)(arg1)->At(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXList_Clear(void * jarg1) {
  int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  result = (ADLX_RESULT)(arg1)->Clear();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXList_Remove_Back(void * jarg1) {
  int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  result = (ADLX_RESULT)(arg1)->Remove_Back();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXList_Add_Back(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  adlx::IADLXInterface *arg2 = (adlx::IADLXInterface *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  arg2 = (adlx::IADLXInterface *)jarg2; 
  result = (ADLX_RESULT)(arg1)->Add_Back(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXList(void * jarg1) {
  adlx::IADLXList *arg1 = (adlx::IADLXList *) 0 ;
  
  arg1 = (adlx::IADLXList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplay_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplay::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_ManufacturerID(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx_uint *arg2 = (adlx_uint *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (adlx_uint *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->ManufacturerID(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_DisplayType(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  ADLX_DISPLAY_TYPE *arg2 = (ADLX_DISPLAY_TYPE *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (ADLX_DISPLAY_TYPE *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->DisplayType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_ConnectorType(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  ADLX_DISPLAY_CONNECTOR_TYPE *arg2 = (ADLX_DISPLAY_CONNECTOR_TYPE *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (ADLX_DISPLAY_CONNECTOR_TYPE *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->ConnectorType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_Name(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->Name((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_EDID(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->EDID((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_NativeResolution(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx_int *arg2 = (adlx_int *) 0 ;
  adlx_int *arg3 = (adlx_int *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (adlx_int *)jarg2; 
  arg3 = (adlx_int *)jarg3; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->NativeResolution(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_RefreshRate(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx_double *arg2 = (adlx_double *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (adlx_double *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->RefreshRate(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_PixelClock(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx_uint *arg2 = (adlx_uint *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (adlx_uint *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->PixelClock(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_ScanType(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  ADLX_DISPLAY_SCAN_TYPE *arg2 = (ADLX_DISPLAY_SCAN_TYPE *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (ADLX_DISPLAY_SCAN_TYPE *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXDisplay const *)arg1)->ScanType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_GetGPU(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXGPU **arg2 = (adlx::IADLXGPU **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (adlx::IADLXGPU **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetGPU(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay_UniqueId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx_size *arg2 = (adlx_size *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  arg2 = (adlx_size *)jarg2; 
  result = (ADLX_RESULT)(arg1)->UniqueId(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplay(void * jarg1) {
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplayList_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplayList::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplayList_ITEM_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplayList::ITEM_IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayList_At(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayList *arg1 = (adlx::IADLXDisplayList *) 0 ;
  adlx_uint arg2 ;
  adlx::IADLXDisplay **arg3 = (adlx::IADLXDisplay **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayList *)jarg1; 
  arg2 = (adlx_uint)jarg2; 
  arg3 = (adlx::IADLXDisplay **)jarg3; 
  result = (ADLX_RESULT)(arg1)->At(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayList_Add_Back(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayList *arg1 = (adlx::IADLXDisplayList *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayList *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  result = (ADLX_RESULT)(arg1)->Add_Back(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayList(void * jarg1) {
  adlx::IADLXDisplayList *arg1 = (adlx::IADLXDisplayList *) 0 ;
  
  arg1 = (adlx::IADLXDisplayList *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayListChangedListener_OnDisplayListChanged(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  adlx::IADLXDisplayListChangedListener *arg1 = (adlx::IADLXDisplayListChangedListener *) 0 ;
  adlx::IADLXDisplayList *arg2 = (adlx::IADLXDisplayList *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayListChangedListener *)jarg1; 
  arg2 = (adlx::IADLXDisplayList *)jarg2; 
  result = (adlx_bool)(arg1)->OnDisplayListChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IADLXDisplayListChangedListener() {
  void * jresult ;
  adlx::IADLXDisplayListChangedListener *result = 0 ;
  
  result = (adlx::IADLXDisplayListChangedListener *)new SwigDirector_IADLXDisplayListChangedListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayListChangedListener(void * jarg1) {
  adlx::IADLXDisplayListChangedListener *arg1 = (adlx::IADLXDisplayListChangedListener *) 0 ;
  
  arg1 = (adlx::IADLXDisplayListChangedListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IADLXDisplayListChangedListener_director_connect(void *objarg, SwigDirector_IADLXDisplayListChangedListener::SWIG_Callback0_t callback0) {
  adlx::IADLXDisplayListChangedListener *obj = (adlx::IADLXDisplayListChangedListener *)objarg;
  SwigDirector_IADLXDisplayListChangedListener *director = static_cast<SwigDirector_IADLXDisplayListChangedListener *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplayGamutChangedEvent_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplayGamutChangedEvent::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayGamutChangedEvent_GetDisplay(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayGamutChangedEvent *arg1 = (adlx::IADLXDisplayGamutChangedEvent *) 0 ;
  adlx::IADLXDisplay **arg2 = (adlx::IADLXDisplay **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayGamutChangedEvent *)jarg1; 
  arg2 = (adlx::IADLXDisplay **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplay(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGamutChangedEvent_IsWhitePointChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplayGamutChangedEvent *arg1 = (adlx::IADLXDisplayGamutChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGamutChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsWhitePointChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGamutChangedEvent_IsColorSpaceChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplayGamutChangedEvent *arg1 = (adlx::IADLXDisplayGamutChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGamutChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsColorSpaceChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayGamutChangedEvent(void * jarg1) {
  adlx::IADLXDisplayGamutChangedEvent *arg1 = (adlx::IADLXDisplayGamutChangedEvent *) 0 ;
  
  arg1 = (adlx::IADLXDisplayGamutChangedEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGamutChangedListener_OnDisplayGamutChanged(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  adlx::IADLXDisplayGamutChangedListener *arg1 = (adlx::IADLXDisplayGamutChangedListener *) 0 ;
  adlx::IADLXDisplayGamutChangedEvent *arg2 = (adlx::IADLXDisplayGamutChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGamutChangedListener *)jarg1; 
  arg2 = (adlx::IADLXDisplayGamutChangedEvent *)jarg2; 
  result = (adlx_bool)(arg1)->OnDisplayGamutChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayGamutChangedListener(void * jarg1) {
  adlx::IADLXDisplayGamutChangedListener *arg1 = (adlx::IADLXDisplayGamutChangedListener *) 0 ;
  
  arg1 = (adlx::IADLXDisplayGamutChangedListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplayGammaChangedEvent_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplayGammaChangedEvent::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayGammaChangedEvent_GetDisplay(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayGammaChangedEvent *arg1 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  adlx::IADLXDisplay **arg2 = (adlx::IADLXDisplay **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayGammaChangedEvent *)jarg1; 
  arg2 = (adlx::IADLXDisplay **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplay(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGammaChangedEvent_IsGammaRampChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplayGammaChangedEvent *arg1 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGammaChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsGammaRampChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGammaChangedEvent_IsGammaCoefficientChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplayGammaChangedEvent *arg1 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGammaChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsGammaCoefficientChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGammaChangedEvent_IsReGammaChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplayGammaChangedEvent *arg1 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGammaChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsReGammaChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGammaChangedEvent_IsDeGammaChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplayGammaChangedEvent *arg1 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGammaChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsDeGammaChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayGammaChangedEvent(void * jarg1) {
  adlx::IADLXDisplayGammaChangedEvent *arg1 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  
  arg1 = (adlx::IADLXDisplayGammaChangedEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplayGammaChangedListener_OnDisplayGammaChanged(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  adlx::IADLXDisplayGammaChangedListener *arg1 = (adlx::IADLXDisplayGammaChangedListener *) 0 ;
  adlx::IADLXDisplayGammaChangedEvent *arg2 = (adlx::IADLXDisplayGammaChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplayGammaChangedListener *)jarg1; 
  arg2 = (adlx::IADLXDisplayGammaChangedEvent *)jarg2; 
  result = (adlx_bool)(arg1)->OnDisplayGammaChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayGammaChangedListener(void * jarg1) {
  adlx::IADLXDisplayGammaChangedListener *arg1 = (adlx::IADLXDisplayGammaChangedListener *) 0 ;
  
  arg1 = (adlx::IADLXDisplayGammaChangedListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplay3DLUTChangedEvent_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplay3DLUTChangedEvent::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplay3DLUTChangedEvent_GetDisplay(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplay3DLUTChangedEvent *arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *) 0 ;
  adlx::IADLXDisplay **arg2 = (adlx::IADLXDisplay **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *)jarg1; 
  arg2 = (adlx::IADLXDisplay **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplay(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplay3DLUTChangedEvent_IsSCEChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplay3DLUTChangedEvent *arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsSCEChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplay3DLUTChangedEvent_IsCustom3DLUTChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplay3DLUTChangedEvent *arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustom3DLUTChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplay3DLUTChangedEvent(void * jarg1) {
  adlx::IADLXDisplay3DLUTChangedEvent *arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *) 0 ;
  
  arg1 = (adlx::IADLXDisplay3DLUTChangedEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplay3DLUTChangedListener_OnDisplay3DLUTChanged(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  adlx::IADLXDisplay3DLUTChangedListener *arg1 = (adlx::IADLXDisplay3DLUTChangedListener *) 0 ;
  adlx::IADLXDisplay3DLUTChangedEvent *arg2 = (adlx::IADLXDisplay3DLUTChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplay3DLUTChangedListener *)jarg1; 
  arg2 = (adlx::IADLXDisplay3DLUTChangedEvent *)jarg2; 
  result = (adlx_bool)(arg1)->OnDisplay3DLUTChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplay3DLUTChangedListener(void * jarg1) {
  adlx::IADLXDisplay3DLUTChangedListener *arg1 = (adlx::IADLXDisplay3DLUTChangedListener *) 0 ;
  
  arg1 = (adlx::IADLXDisplay3DLUTChangedListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplaySettingsChangedEvent::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_GetDisplay(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx::IADLXDisplay **arg2 = (adlx::IADLXDisplay **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  arg2 = (adlx::IADLXDisplay **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplay(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsFreeSyncChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsFreeSyncChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsVSRChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsVSRChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsGPUScalingChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsGPUScalingChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsScalingModeChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsScalingModeChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsIntegerScalingChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsIntegerScalingChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsColorDepthChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsColorDepthChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsPixelFormatChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsPixelFormatChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsHDCPChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsHDCPChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsCustomColorHueChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustomColorHueChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsCustomColorSaturationChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustomColorSaturationChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsCustomColorBrightnessChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustomColorBrightnessChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsCustomColorTemperatureChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustomColorTemperatureChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsCustomColorContrastChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustomColorContrastChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsCustomResolutionChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsCustomResolutionChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedEvent_IsVariBrightChanged(void * jarg1) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  result = (adlx_bool)(arg1)->IsVariBrightChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplaySettingsChangedEvent(void * jarg1) {
  adlx::IADLXDisplaySettingsChangedEvent *arg1 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXDisplaySettingsChangedListener_OnDisplaySettingsChanged(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  adlx::IADLXDisplaySettingsChangedListener *arg1 = (adlx::IADLXDisplaySettingsChangedListener *) 0 ;
  adlx::IADLXDisplaySettingsChangedEvent *arg2 = (adlx::IADLXDisplaySettingsChangedEvent *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedListener *)jarg1; 
  arg2 = (adlx::IADLXDisplaySettingsChangedEvent *)jarg2; 
  result = (adlx_bool)(arg1)->OnDisplaySettingsChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplaySettingsChangedListener(void * jarg1) {
  adlx::IADLXDisplaySettingsChangedListener *arg1 = (adlx::IADLXDisplaySettingsChangedListener *) 0 ;
  
  arg1 = (adlx::IADLXDisplaySettingsChangedListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplayChangedHandling::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_AddDisplayListEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayListChangedListener *arg2 = (adlx::IADLXDisplayListChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplayListChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->AddDisplayListEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_RemoveDisplayListEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayListChangedListener *arg2 = (adlx::IADLXDisplayListChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplayListChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->RemoveDisplayListEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_AddDisplayGamutEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayGamutChangedListener *arg2 = (adlx::IADLXDisplayGamutChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplayGamutChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->AddDisplayGamutEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_RemoveDisplayGamutEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayGamutChangedListener *arg2 = (adlx::IADLXDisplayGamutChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplayGamutChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->RemoveDisplayGamutEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_AddDisplayGammaEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayGammaChangedListener *arg2 = (adlx::IADLXDisplayGammaChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplayGammaChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->AddDisplayGammaEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_RemoveDisplayGammaEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayGammaChangedListener *arg2 = (adlx::IADLXDisplayGammaChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplayGammaChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->RemoveDisplayGammaEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_AddDisplay3DLUTEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplay3DLUTChangedListener *arg2 = (adlx::IADLXDisplay3DLUTChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplay3DLUTChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->AddDisplay3DLUTEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_RemoveDisplay3DLUTEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplay3DLUTChangedListener *arg2 = (adlx::IADLXDisplay3DLUTChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplay3DLUTChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->RemoveDisplay3DLUTEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_AddDisplaySettingsEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplaySettingsChangedListener *arg2 = (adlx::IADLXDisplaySettingsChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplaySettingsChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->AddDisplaySettingsEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_RemoveDisplaySettingsEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplaySettingsChangedListener *arg2 = (adlx::IADLXDisplaySettingsChangedListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXDisplaySettingsChangedListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->RemoveDisplaySettingsEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayChangedHandling(void * jarg1) {
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXDisplayServices_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXDisplayServices::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetNumberOfDisplays(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx_uint *arg2 = (adlx_uint *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx_uint *)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetNumberOfDisplays(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetDisplays(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplayList **arg2 = (adlx::IADLXDisplayList **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplayList **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplays(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_Get3DLUT(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplay3DLUT **arg3 = (adlx::IADLXDisplay3DLUT **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplay3DLUT **)jarg3; 
  result = (ADLX_RESULT)(arg1)->Get3DLUT(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetGamut(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayGamut **arg3 = (adlx::IADLXDisplayGamut **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayGamut **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetGamut(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetGamma(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayGamma **arg3 = (adlx::IADLXDisplayGamma **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayGamma **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetGamma(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetDisplayChangedHandling(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplayChangedHandling **arg2 = (adlx::IADLXDisplayChangedHandling **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplayChangedHandling **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplayChangedHandling(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetFreeSync(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayFreeSync **arg3 = (adlx::IADLXDisplayFreeSync **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayFreeSync **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetFreeSync(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetVirtualSuperResolution(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayVSR **arg3 = (adlx::IADLXDisplayVSR **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayVSR **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetVirtualSuperResolution(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetGPUScaling(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayGPUScaling **arg3 = (adlx::IADLXDisplayGPUScaling **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayGPUScaling **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetGPUScaling(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetScalingMode(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayScalingMode **arg3 = (adlx::IADLXDisplayScalingMode **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayScalingMode **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetScalingMode(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetIntegerScaling(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayIntegerScaling **arg3 = (adlx::IADLXDisplayIntegerScaling **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayIntegerScaling **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetIntegerScaling(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetColorDepth(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayColorDepth **arg3 = (adlx::IADLXDisplayColorDepth **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayColorDepth **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetColorDepth(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetPixelFormat(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayPixelFormat **arg3 = (adlx::IADLXDisplayPixelFormat **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayPixelFormat **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetPixelFormat(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetCustomColor(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayCustomColor **arg3 = (adlx::IADLXDisplayCustomColor **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayCustomColor **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetCustomColor(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetHDCP(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayHDCP **arg3 = (adlx::IADLXDisplayHDCP **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayHDCP **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetHDCP(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetCustomResolution(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayCustomResolution **arg3 = (adlx::IADLXDisplayCustomResolution **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayCustomResolution **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetCustomResolution(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXDisplayServices_GetVariBright(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplayVariBright **arg3 = (adlx::IADLXDisplayVariBright **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx::IADLXDisplayVariBright **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetVariBright(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXDisplayServices(void * jarg1) {
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXGPU_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXGPU::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_VendorId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)(arg1)->VendorId((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_ASICFamilyType(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  ADLX_ASIC_FAMILY_TYPE *arg2 = (ADLX_ASIC_FAMILY_TYPE *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (ADLX_ASIC_FAMILY_TYPE *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->ASICFamilyType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_Type(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  ADLX_GPU_TYPE *arg2 = (ADLX_GPU_TYPE *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (ADLX_GPU_TYPE *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->Type(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_IsExternal(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  adlx_bool *arg2 = (adlx_bool *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (adlx_bool *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->IsExternal(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_Name(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->Name((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_DriverPath(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->DriverPath((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_PNPString(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->PNPString((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_HasDesktops(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  adlx_bool *arg2 = (adlx_bool *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (adlx_bool *)jarg2; 
  result = (ADLX_RESULT)((adlx::IADLXGPU const *)arg1)->HasDesktops(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_TotalVRAM(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  adlx_uint *arg2 = (adlx_uint *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (adlx_uint *)jarg2; 
  result = (ADLX_RESULT)(arg1)->TotalVRAM(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_VRAMType(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)(arg1)->VRAMType((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_BIOSInfo(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (char **)jarg4; 
  result = (ADLX_RESULT)(arg1)->BIOSInfo((char const **)arg2,(char const **)arg3,(char const **)arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_DeviceId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)(arg1)->DeviceId((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_RevisionId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)(arg1)->RevisionId((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_SubSystemId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)(arg1)->SubSystemId((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_SubSystemVendorId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  char **arg2 = (char **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (char **)jarg2; 
  result = (ADLX_RESULT)(arg1)->SubSystemVendorId((char const **)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPU_UniqueId(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  adlx_int *arg2 = (adlx_int *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  arg2 = (adlx_int *)jarg2; 
  result = (ADLX_RESULT)(arg1)->UniqueId(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXGPU(void * jarg1) {
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXGPUList_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXGPUList::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXGPUList_ITEM_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXGPUList::ITEM_IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPUList_At(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXGPUList *arg1 = (adlx::IADLXGPUList *) 0 ;
  adlx_uint arg2 ;
  adlx::IADLXGPU **arg3 = (adlx::IADLXGPU **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPUList *)jarg1; 
  arg2 = (adlx_uint)jarg2; 
  arg3 = (adlx::IADLXGPU **)jarg3; 
  result = (ADLX_RESULT)(arg1)->At(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPUList_Add_Back(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPUList *arg1 = (adlx::IADLXGPUList *) 0 ;
  adlx::IADLXGPU *arg2 = (adlx::IADLXGPU *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPUList *)jarg1; 
  arg2 = (adlx::IADLXGPU *)jarg2; 
  result = (ADLX_RESULT)(arg1)->Add_Back(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXGPUList(void * jarg1) {
  adlx::IADLXGPUList *arg1 = (adlx::IADLXGPUList *) 0 ;
  
  arg1 = (adlx::IADLXGPUList *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IADLXGPUsEventListener_OnGPUListChanged(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  adlx::IADLXGPUsEventListener *arg1 = (adlx::IADLXGPUsEventListener *) 0 ;
  adlx::IADLXGPUList *arg2 = (adlx::IADLXGPUList *) 0 ;
  adlx_bool result;
  
  arg1 = (adlx::IADLXGPUsEventListener *)jarg1; 
  arg2 = (adlx::IADLXGPUList *)jarg2; 
  result = (adlx_bool)(arg1)->OnGPUListChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXGPUsEventListener(void * jarg1) {
  adlx::IADLXGPUsEventListener *arg1 = (adlx::IADLXGPUsEventListener *) 0 ;
  
  arg1 = (adlx::IADLXGPUsEventListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IADLXGPUsChangedHandling_IID() {
  void * jresult ;
  wchar_t *result = 0 ;
  
  result = (wchar_t *)adlx::IADLXGPUsChangedHandling::IID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPUsChangedHandling_AddGPUsListEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPUsChangedHandling *arg1 = (adlx::IADLXGPUsChangedHandling *) 0 ;
  adlx::IADLXGPUsEventListener *arg2 = (adlx::IADLXGPUsEventListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPUsChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXGPUsEventListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->AddGPUsListEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXGPUsChangedHandling_RemoveGPUsListEventListener(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXGPUsChangedHandling *arg1 = (adlx::IADLXGPUsChangedHandling *) 0 ;
  adlx::IADLXGPUsEventListener *arg2 = (adlx::IADLXGPUsEventListener *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXGPUsChangedHandling *)jarg1; 
  arg2 = (adlx::IADLXGPUsEventListener *)jarg2; 
  result = (ADLX_RESULT)(arg1)->RemoveGPUsListEventListener(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXGPUsChangedHandling(void * jarg1) {
  adlx::IADLXGPUsChangedHandling *arg1 = (adlx::IADLXGPUsChangedHandling *) 0 ;
  
  arg1 = (adlx::IADLXGPUsChangedHandling *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_HybridGraphicsType(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  ADLX_HG_TYPE *arg2 = (ADLX_HG_TYPE *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (ADLX_HG_TYPE *)jarg2; 
  result = (ADLX_RESULT)(arg1)->HybridGraphicsType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetGPUs(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXGPUList **arg2 = (adlx::IADLXGPUList **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXGPUList **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetGPUs(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_QueryInterface(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void **arg3 = (void **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (void **)jarg3; 
  result = (ADLX_RESULT)(arg1)->QueryInterface((wchar_t const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetDisplaysServices(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXDisplayServices **arg2 = (adlx::IADLXDisplayServices **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXDisplayServices **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDisplaysServices(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetDesktopsServices(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXDesktopServices **arg2 = (adlx::IADLXDesktopServices **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXDesktopServices **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetDesktopsServices(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetGPUsChangedHandling(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXGPUsChangedHandling **arg2 = (adlx::IADLXGPUsChangedHandling **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXGPUsChangedHandling **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetGPUsChangedHandling(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_EnableLog(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  ADLX_LOG_DESTINATION arg2 ;
  ADLX_LOG_SEVERITY arg3 ;
  adlx::IADLXLog *arg4 = (adlx::IADLXLog *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (ADLX_LOG_DESTINATION)jarg2; 
  arg3 = (ADLX_LOG_SEVERITY)jarg3; 
  arg4 = (adlx::IADLXLog *)jarg4; 
  arg5 = (wchar_t *)jarg5; 
  result = (ADLX_RESULT)(arg1)->EnableLog(arg2,arg3,arg4,(wchar_t const *)arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_Get3DSettingsServices(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLX3DSettingsServices **arg2 = (adlx::IADLX3DSettingsServices **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLX3DSettingsServices **)jarg2; 
  result = (ADLX_RESULT)(arg1)->Get3DSettingsServices(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetGPUTuningServices(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXGPUTuningServices **arg2 = (adlx::IADLXGPUTuningServices **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXGPUTuningServices **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetGPUTuningServices(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetPerformanceMonitoringServices(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXPerformanceMonitoringServices **arg2 = (adlx::IADLXPerformanceMonitoringServices **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXPerformanceMonitoringServices **)jarg2; 
  result = (ADLX_RESULT)(arg1)->GetPerformanceMonitoringServices(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_TotalSystemRAM(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx_uint *arg2 = (adlx_uint *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx_uint *)jarg2; 
  result = (ADLX_RESULT)(arg1)->TotalSystemRAM(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXSystem_GetI2C(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  adlx::IADLXGPU *arg2 = (adlx::IADLXGPU *) 0 ;
  adlx::IADLXI2C **arg3 = (adlx::IADLXI2C **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  arg2 = (adlx::IADLXGPU *)jarg2; 
  arg3 = (adlx::IADLXI2C **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetI2C(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXSystem(void * jarg1) {
  adlx::IADLXSystem *arg1 = (adlx::IADLXSystem *) 0 ;
  
  arg1 = (adlx::IADLXSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_GetADLXGPUFromBdf(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx_int arg2 ;
  adlx_int arg3 ;
  adlx_int arg4 ;
  adlx::IADLXGPU **arg5 = (adlx::IADLXGPU **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx_int)jarg2; 
  arg3 = (adlx_int)jarg3; 
  arg4 = (adlx_int)jarg4; 
  arg5 = (adlx::IADLXGPU **)jarg5; 
  result = (ADLX_RESULT)(arg1)->GetADLXGPUFromBdf(arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_GetADLXGPUFromAdlAdapterIndex(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx_int arg2 ;
  adlx::IADLXGPU **arg3 = (adlx::IADLXGPU **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx_int)jarg2; 
  arg3 = (adlx::IADLXGPU **)jarg3; 
  result = (ADLX_RESULT)(arg1)->GetADLXGPUFromAdlAdapterIndex(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_BdfFromADLXGPU(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx::IADLXGPU *arg2 = (adlx::IADLXGPU *) 0 ;
  adlx_int *arg3 = (adlx_int *) 0 ;
  adlx_int *arg4 = (adlx_int *) 0 ;
  adlx_int *arg5 = (adlx_int *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx::IADLXGPU *)jarg2; 
  arg3 = (adlx_int *)jarg3; 
  arg4 = (adlx_int *)jarg4; 
  arg5 = (adlx_int *)jarg5; 
  result = (ADLX_RESULT)(arg1)->BdfFromADLXGPU(arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_AdlAdapterIndexFromADLXGPU(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx::IADLXGPU *arg2 = (adlx::IADLXGPU *) 0 ;
  adlx_int *arg3 = (adlx_int *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx::IADLXGPU *)jarg2; 
  arg3 = (adlx_int *)jarg3; 
  result = (ADLX_RESULT)(arg1)->AdlAdapterIndexFromADLXGPU(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_GetADLXDisplayFromADLIds(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx_int arg2 ;
  adlx_int arg3 ;
  adlx_int arg4 ;
  adlx_int arg5 ;
  adlx_int arg6 ;
  adlx::IADLXDisplay **arg7 = (adlx::IADLXDisplay **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx_int)jarg2; 
  arg3 = (adlx_int)jarg3; 
  arg4 = (adlx_int)jarg4; 
  arg5 = (adlx_int)jarg5; 
  arg6 = (adlx_int)jarg6; 
  arg7 = (adlx::IADLXDisplay **)jarg7; 
  result = (ADLX_RESULT)(arg1)->GetADLXDisplayFromADLIds(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_ADLIdsFromADLXDisplay(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  adlx_int *arg3 = (adlx_int *) 0 ;
  adlx_int *arg4 = (adlx_int *) 0 ;
  adlx_int *arg5 = (adlx_int *) 0 ;
  adlx_int *arg6 = (adlx_int *) 0 ;
  adlx_int *arg7 = (adlx_int *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  arg3 = (adlx_int *)jarg3; 
  arg4 = (adlx_int *)jarg4; 
  arg5 = (adlx_int *)jarg5; 
  arg6 = (adlx_int *)jarg6; 
  arg7 = (adlx_int *)jarg7; 
  result = (ADLX_RESULT)(arg1)->ADLIdsFromADLXDisplay(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_GetADLXDesktopFromADLIds(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx_int arg2 ;
  adlx_int arg3 ;
  adlx_int arg4 ;
  adlx_int arg5 ;
  adlx_int arg6 ;
  adlx::IADLXDesktop **arg7 = (adlx::IADLXDesktop **) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx_int)jarg2; 
  arg3 = (adlx_int)jarg3; 
  arg4 = (adlx_int)jarg4; 
  arg5 = (adlx_int)jarg5; 
  arg6 = (adlx_int)jarg6; 
  arg7 = (adlx::IADLXDesktop **)jarg7; 
  result = (ADLX_RESULT)(arg1)->GetADLXDesktopFromADLIds(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLMapping_ADLIdsFromADLXDesktop(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  adlx::IADLXDesktop *arg2 = (adlx::IADLXDesktop *) 0 ;
  adlx_int *arg3 = (adlx_int *) 0 ;
  adlx_int *arg4 = (adlx_int *) 0 ;
  adlx_int *arg5 = (adlx_int *) 0 ;
  adlx_int *arg6 = (adlx_int *) 0 ;
  adlx_int *arg7 = (adlx_int *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  arg2 = (adlx::IADLXDesktop *)jarg2; 
  arg3 = (adlx_int *)jarg3; 
  arg4 = (adlx_int *)jarg4; 
  arg5 = (adlx_int *)jarg5; 
  arg6 = (adlx_int *)jarg6; 
  arg7 = (adlx_int *)jarg7; 
  result = (ADLX_RESULT)(arg1)->ADLIdsFromADLXDesktop(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLMapping(void * jarg1) {
  adlx::IADLMapping *arg1 = (adlx::IADLMapping *) 0 ;
  
  arg1 = (adlx::IADLMapping *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IADLXLog_WriteLog(void * jarg1, void * jarg2) {
  int jresult ;
  adlx::IADLXLog *arg1 = (adlx::IADLXLog *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (adlx::IADLXLog *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (ADLX_RESULT)(arg1)->WriteLog((wchar_t const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IADLXLog(void * jarg1) {
  adlx::IADLXLog *arg1 = (adlx::IADLXLog *) 0 ;
  
  arg1 = (adlx::IADLXLog *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ADLXHelper() {
  void * jresult ;
  ADLXHelper *result = 0 ;
  
  result = (ADLXHelper *)new ADLXHelper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ADLXHelper(void * jarg1) {
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  
  arg1 = (ADLXHelper *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ADLXHelper_InitializeWithCallerAdl(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  adlx_handle arg2 = (adlx_handle) 0 ;
  ADLX_ADL_Main_Memory_Free arg3 ;
  ADLX_ADL_Main_Memory_Free *argp3 ;
  ADLX_RESULT result;
  
  arg1 = (ADLXHelper *)jarg1; 
  arg2 = (adlx_handle)jarg2; 
  argp3 = (ADLX_ADL_Main_Memory_Free *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ADLX_ADL_Main_Memory_Free", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (ADLX_RESULT)(arg1)->InitializeWithCallerAdl(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ADLXHelper_Initialize(void * jarg1) {
  int jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (ADLX_RESULT)(arg1)->Initialize();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ADLXHelper_InitializeWithIncompatibleDriver(void * jarg1) {
  int jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (ADLX_RESULT)(arg1)->InitializeWithIncompatibleDriver();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ADLXHelper_Terminate(void * jarg1) {
  int jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  ADLX_RESULT result;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (ADLX_RESULT)(arg1)->Terminate();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ADLXHelper_QueryFullVersion(void * jarg1) {
  unsigned long long jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  adlx_uint64 result;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (adlx_uint64)(arg1)->QueryFullVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ADLXHelper_QueryVersion(void * jarg1) {
  char * jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  char *result = 0 ;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (char *)(arg1)->QueryVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ADLXHelper_GetSystemServices(void * jarg1) {
  void * jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  adlx::IADLXSystem *result = 0 ;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (adlx::IADLXSystem *)(arg1)->GetSystemServices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ADLXHelper_GetAdlMapping(void * jarg1) {
  void * jresult ;
  ADLXHelper *arg1 = (ADLXHelper *) 0 ;
  adlx::IADLMapping *result = 0 ;
  
  arg1 = (ADLXHelper *)jarg1; 
  result = (adlx::IADLMapping *)(arg1)->GetAdlMapping();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_g_ADLX_set(void * jarg1) {
  ::ADLXHelper *arg1 = (::ADLXHelper *) 0 ;
  
  arg1 = (::ADLXHelper *)jarg1; 
  g_ADLX = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_g_ADLX_get() {
  void * jresult ;
  ::ADLXHelper *result = 0 ;
  
  result = (::ADLXHelper *)&g_ADLX;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_intP() {
  void * jresult ;
  adlx_int *result = 0 ;
  
  result = (adlx_int *)new_intP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_intP(int jarg1) {
  void * jresult ;
  adlx_int arg1 ;
  adlx_int *result = 0 ;
  
  arg1 = (adlx_int)jarg1; 
  result = (adlx_int *)copy_intP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_intP(void * jarg1) {
  adlx_int *arg1 = (adlx_int *) 0 ;
  
  arg1 = (adlx_int *)jarg1; 
  delete_intP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_intP_assign(void * jarg1, int jarg2) {
  adlx_int *arg1 = (adlx_int *) 0 ;
  adlx_int arg2 ;
  
  arg1 = (adlx_int *)jarg1; 
  arg2 = (adlx_int)jarg2; 
  intP_assign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_intP_value(void * jarg1) {
  int jresult ;
  adlx_int *arg1 = (adlx_int *) 0 ;
  adlx_int result;
  
  arg1 = (adlx_int *)jarg1; 
  result = (adlx_int)intP_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_doubleP() {
  void * jresult ;
  double *result = 0 ;
  
  result = (double *)new_doubleP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_doubleP(double jarg1) {
  void * jresult ;
  double arg1 ;
  double *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (double *)copy_doubleP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_doubleP(void * jarg1) {
  double *arg1 = (double *) 0 ;
  
  arg1 = (double *)jarg1; 
  delete_doubleP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_doubleP_assign(void * jarg1, double jarg2) {
  double *arg1 = (double *) 0 ;
  double arg2 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double)jarg2; 
  doubleP_assign(arg1,arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_doubleP_value(void * jarg1) {
  double jresult ;
  double *arg1 = (double *) 0 ;
  double result;
  
  arg1 = (double *)jarg1; 
  result = (double)doubleP_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_uintP() {
  void * jresult ;
  adlx_uint *result = 0 ;
  
  result = (adlx_uint *)new_uintP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_uintP(unsigned int jarg1) {
  void * jresult ;
  adlx_uint arg1 ;
  adlx_uint *result = 0 ;
  
  arg1 = (adlx_uint)jarg1; 
  result = (adlx_uint *)copy_uintP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_uintP(void * jarg1) {
  adlx_uint *arg1 = (adlx_uint *) 0 ;
  
  arg1 = (adlx_uint *)jarg1; 
  delete_uintP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_uintP_assign(void * jarg1, unsigned int jarg2) {
  adlx_uint *arg1 = (adlx_uint *) 0 ;
  adlx_uint arg2 ;
  
  arg1 = (adlx_uint *)jarg1; 
  arg2 = (adlx_uint)jarg2; 
  uintP_assign(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_uintP_value(void * jarg1) {
  unsigned int jresult ;
  adlx_uint *arg1 = (adlx_uint *) 0 ;
  adlx_uint result;
  
  arg1 = (adlx_uint *)jarg1; 
  result = (adlx_uint)uintP_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displayTypeP() {
  void * jresult ;
  ADLX_DISPLAY_TYPE *result = 0 ;
  
  result = (ADLX_DISPLAY_TYPE *)new_displayTypeP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displayTypeP(int jarg1) {
  void * jresult ;
  ADLX_DISPLAY_TYPE arg1 ;
  ADLX_DISPLAY_TYPE *result = 0 ;
  
  arg1 = (ADLX_DISPLAY_TYPE)jarg1; 
  result = (ADLX_DISPLAY_TYPE *)copy_displayTypeP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displayTypeP(void * jarg1) {
  ADLX_DISPLAY_TYPE *arg1 = (ADLX_DISPLAY_TYPE *) 0 ;
  
  arg1 = (ADLX_DISPLAY_TYPE *)jarg1; 
  delete_displayTypeP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displayTypeP_assign(void * jarg1, int jarg2) {
  ADLX_DISPLAY_TYPE *arg1 = (ADLX_DISPLAY_TYPE *) 0 ;
  ADLX_DISPLAY_TYPE arg2 ;
  
  arg1 = (ADLX_DISPLAY_TYPE *)jarg1; 
  arg2 = (ADLX_DISPLAY_TYPE)jarg2; 
  displayTypeP_assign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_displayTypeP_value(void * jarg1) {
  int jresult ;
  ADLX_DISPLAY_TYPE *arg1 = (ADLX_DISPLAY_TYPE *) 0 ;
  ADLX_DISPLAY_TYPE result;
  
  arg1 = (ADLX_DISPLAY_TYPE *)jarg1; 
  result = (ADLX_DISPLAY_TYPE)displayTypeP_value(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displayConnectTypeP() {
  void * jresult ;
  ADLX_DISPLAY_CONNECTOR_TYPE *result = 0 ;
  
  result = (ADLX_DISPLAY_CONNECTOR_TYPE *)new_displayConnectTypeP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displayConnectTypeP(int jarg1) {
  void * jresult ;
  ADLX_DISPLAY_CONNECTOR_TYPE arg1 ;
  ADLX_DISPLAY_CONNECTOR_TYPE *result = 0 ;
  
  arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE)jarg1; 
  result = (ADLX_DISPLAY_CONNECTOR_TYPE *)copy_displayConnectTypeP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displayConnectTypeP(void * jarg1) {
  ADLX_DISPLAY_CONNECTOR_TYPE *arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE *) 0 ;
  
  arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE *)jarg1; 
  delete_displayConnectTypeP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displayConnectTypeP_assign(void * jarg1, int jarg2) {
  ADLX_DISPLAY_CONNECTOR_TYPE *arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE *) 0 ;
  ADLX_DISPLAY_CONNECTOR_TYPE arg2 ;
  
  arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE *)jarg1; 
  arg2 = (ADLX_DISPLAY_CONNECTOR_TYPE)jarg2; 
  displayConnectTypeP_assign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_displayConnectTypeP_value(void * jarg1) {
  int jresult ;
  ADLX_DISPLAY_CONNECTOR_TYPE *arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE *) 0 ;
  ADLX_DISPLAY_CONNECTOR_TYPE result;
  
  arg1 = (ADLX_DISPLAY_CONNECTOR_TYPE *)jarg1; 
  result = (ADLX_DISPLAY_CONNECTOR_TYPE)displayConnectTypeP_value(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displayScanTypeP() {
  void * jresult ;
  ADLX_DISPLAY_SCAN_TYPE *result = 0 ;
  
  result = (ADLX_DISPLAY_SCAN_TYPE *)new_displayScanTypeP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displayScanTypeP(int jarg1) {
  void * jresult ;
  ADLX_DISPLAY_SCAN_TYPE arg1 ;
  ADLX_DISPLAY_SCAN_TYPE *result = 0 ;
  
  arg1 = (ADLX_DISPLAY_SCAN_TYPE)jarg1; 
  result = (ADLX_DISPLAY_SCAN_TYPE *)copy_displayScanTypeP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displayScanTypeP(void * jarg1) {
  ADLX_DISPLAY_SCAN_TYPE *arg1 = (ADLX_DISPLAY_SCAN_TYPE *) 0 ;
  
  arg1 = (ADLX_DISPLAY_SCAN_TYPE *)jarg1; 
  delete_displayScanTypeP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displayScanTypeP_assign(void * jarg1, int jarg2) {
  ADLX_DISPLAY_SCAN_TYPE *arg1 = (ADLX_DISPLAY_SCAN_TYPE *) 0 ;
  ADLX_DISPLAY_SCAN_TYPE arg2 ;
  
  arg1 = (ADLX_DISPLAY_SCAN_TYPE *)jarg1; 
  arg2 = (ADLX_DISPLAY_SCAN_TYPE)jarg2; 
  displayScanTypeP_assign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_displayScanTypeP_value(void * jarg1) {
  int jresult ;
  ADLX_DISPLAY_SCAN_TYPE *arg1 = (ADLX_DISPLAY_SCAN_TYPE *) 0 ;
  ADLX_DISPLAY_SCAN_TYPE result;
  
  arg1 = (ADLX_DISPLAY_SCAN_TYPE *)jarg1; 
  result = (ADLX_DISPLAY_SCAN_TYPE)displayScanTypeP_value(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_gpuTypeP() {
  void * jresult ;
  ADLX_GPU_TYPE *result = 0 ;
  
  result = (ADLX_GPU_TYPE *)new_gpuTypeP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_gpuTypeP(int jarg1) {
  void * jresult ;
  ADLX_GPU_TYPE arg1 ;
  ADLX_GPU_TYPE *result = 0 ;
  
  arg1 = (ADLX_GPU_TYPE)jarg1; 
  result = (ADLX_GPU_TYPE *)copy_gpuTypeP(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_gpuTypeP(void * jarg1) {
  ADLX_GPU_TYPE *arg1 = (ADLX_GPU_TYPE *) 0 ;
  
  arg1 = (ADLX_GPU_TYPE *)jarg1; 
  delete_gpuTypeP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpuTypeP_assign(void * jarg1, int jarg2) {
  ADLX_GPU_TYPE *arg1 = (ADLX_GPU_TYPE *) 0 ;
  ADLX_GPU_TYPE arg2 ;
  
  arg1 = (ADLX_GPU_TYPE *)jarg1; 
  arg2 = (ADLX_GPU_TYPE)jarg2; 
  gpuTypeP_assign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_gpuTypeP_value(void * jarg1) {
  int jresult ;
  ADLX_GPU_TYPE *arg1 = (ADLX_GPU_TYPE *) 0 ;
  ADLX_GPU_TYPE result;
  
  arg1 = (ADLX_GPU_TYPE *)jarg1; 
  result = (ADLX_GPU_TYPE)gpuTypeP_value(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_adlx_sizeP() {
  void * jresult ;
  adlx_size *result = 0 ;
  
  result = (adlx_size *)new_adlx_sizeP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_adlx_sizeP(unsigned long jarg1) {
  void * jresult ;
  adlx_size arg1 ;
  adlx_size *result = 0 ;
  
  arg1 = (adlx_size)jarg1; 
  result = (adlx_size *)copy_adlx_sizeP(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_adlx_sizeP(void * jarg1) {
  adlx_size *arg1 = (adlx_size *) 0 ;
  
  arg1 = (adlx_size *)jarg1; 
  delete_adlx_sizeP(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_adlx_sizeP_assign(void * jarg1, unsigned long jarg2) {
  adlx_size *arg1 = (adlx_size *) 0 ;
  adlx_size arg2 ;
  
  arg1 = (adlx_size *)jarg1; 
  arg2 = (adlx_size)jarg2; 
  adlx_sizeP_assign(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_adlx_sizeP_value(void * jarg1) {
  unsigned long jresult ;
  adlx_size *arg1 = (adlx_size *) 0 ;
  adlx_size result;
  
  arg1 = (adlx_size *)jarg1; 
  result = adlx_sizeP_value(arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displaySerP_Ptr() {
  void * jresult ;
  adlx::IADLXDisplayServices **result = 0 ;
  
  result = (adlx::IADLXDisplayServices **)new_displaySerP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displaySerP_Ptr(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplayServices *arg1 = (adlx::IADLXDisplayServices *) 0 ;
  adlx::IADLXDisplayServices **result = 0 ;
  
  arg1 = (adlx::IADLXDisplayServices *)jarg1; 
  result = (adlx::IADLXDisplayServices **)copy_displaySerP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displaySerP_Ptr(void * jarg1) {
  adlx::IADLXDisplayServices **arg1 = (adlx::IADLXDisplayServices **) 0 ;
  
  arg1 = (adlx::IADLXDisplayServices **)jarg1; 
  delete_displaySerP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displaySerP_Ptr_assign(void * jarg1, void * jarg2) {
  adlx::IADLXDisplayServices **arg1 = (adlx::IADLXDisplayServices **) 0 ;
  adlx::IADLXDisplayServices *arg2 = (adlx::IADLXDisplayServices *) 0 ;
  
  arg1 = (adlx::IADLXDisplayServices **)jarg1; 
  arg2 = (adlx::IADLXDisplayServices *)jarg2; 
  displaySerP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_displaySerP_Ptr_value(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplayServices **arg1 = (adlx::IADLXDisplayServices **) 0 ;
  adlx::IADLXDisplayServices *result = 0 ;
  
  arg1 = (adlx::IADLXDisplayServices **)jarg1; 
  result = (adlx::IADLXDisplayServices *)displaySerP_Ptr_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displayListP_Ptr() {
  void * jresult ;
  adlx::IADLXDisplayList **result = 0 ;
  
  result = (adlx::IADLXDisplayList **)new_displayListP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displayListP_Ptr(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplayList *arg1 = (adlx::IADLXDisplayList *) 0 ;
  adlx::IADLXDisplayList **result = 0 ;
  
  arg1 = (adlx::IADLXDisplayList *)jarg1; 
  result = (adlx::IADLXDisplayList **)copy_displayListP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displayListP_Ptr(void * jarg1) {
  adlx::IADLXDisplayList **arg1 = (adlx::IADLXDisplayList **) 0 ;
  
  arg1 = (adlx::IADLXDisplayList **)jarg1; 
  delete_displayListP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displayListP_Ptr_assign(void * jarg1, void * jarg2) {
  adlx::IADLXDisplayList **arg1 = (adlx::IADLXDisplayList **) 0 ;
  adlx::IADLXDisplayList *arg2 = (adlx::IADLXDisplayList *) 0 ;
  
  arg1 = (adlx::IADLXDisplayList **)jarg1; 
  arg2 = (adlx::IADLXDisplayList *)jarg2; 
  displayListP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_displayListP_Ptr_value(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplayList **arg1 = (adlx::IADLXDisplayList **) 0 ;
  adlx::IADLXDisplayList *result = 0 ;
  
  arg1 = (adlx::IADLXDisplayList **)jarg1; 
  result = (adlx::IADLXDisplayList *)displayListP_Ptr_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displayP_Ptr() {
  void * jresult ;
  adlx::IADLXDisplay **result = 0 ;
  
  result = (adlx::IADLXDisplay **)new_displayP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displayP_Ptr(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplay *arg1 = (adlx::IADLXDisplay *) 0 ;
  adlx::IADLXDisplay **result = 0 ;
  
  arg1 = (adlx::IADLXDisplay *)jarg1; 
  result = (adlx::IADLXDisplay **)copy_displayP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displayP_Ptr(void * jarg1) {
  adlx::IADLXDisplay **arg1 = (adlx::IADLXDisplay **) 0 ;
  
  arg1 = (adlx::IADLXDisplay **)jarg1; 
  delete_displayP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displayP_Ptr_assign(void * jarg1, void * jarg2) {
  adlx::IADLXDisplay **arg1 = (adlx::IADLXDisplay **) 0 ;
  adlx::IADLXDisplay *arg2 = (adlx::IADLXDisplay *) 0 ;
  
  arg1 = (adlx::IADLXDisplay **)jarg1; 
  arg2 = (adlx::IADLXDisplay *)jarg2; 
  displayP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_displayP_Ptr_value(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplay **arg1 = (adlx::IADLXDisplay **) 0 ;
  adlx::IADLXDisplay *result = 0 ;
  
  arg1 = (adlx::IADLXDisplay **)jarg1; 
  result = (adlx::IADLXDisplay *)displayP_Ptr_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_displayChangeHandlP_Ptr() {
  void * jresult ;
  adlx::IADLXDisplayChangedHandling **result = 0 ;
  
  result = (adlx::IADLXDisplayChangedHandling **)new_displayChangeHandlP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_displayChangeHandlP_Ptr(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplayChangedHandling *arg1 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  adlx::IADLXDisplayChangedHandling **result = 0 ;
  
  arg1 = (adlx::IADLXDisplayChangedHandling *)jarg1; 
  result = (adlx::IADLXDisplayChangedHandling **)copy_displayChangeHandlP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_displayChangeHandlP_Ptr(void * jarg1) {
  adlx::IADLXDisplayChangedHandling **arg1 = (adlx::IADLXDisplayChangedHandling **) 0 ;
  
  arg1 = (adlx::IADLXDisplayChangedHandling **)jarg1; 
  delete_displayChangeHandlP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_displayChangeHandlP_Ptr_assign(void * jarg1, void * jarg2) {
  adlx::IADLXDisplayChangedHandling **arg1 = (adlx::IADLXDisplayChangedHandling **) 0 ;
  adlx::IADLXDisplayChangedHandling *arg2 = (adlx::IADLXDisplayChangedHandling *) 0 ;
  
  arg1 = (adlx::IADLXDisplayChangedHandling **)jarg1; 
  arg2 = (adlx::IADLXDisplayChangedHandling *)jarg2; 
  displayChangeHandlP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_displayChangeHandlP_Ptr_value(void * jarg1) {
  void * jresult ;
  adlx::IADLXDisplayChangedHandling **arg1 = (adlx::IADLXDisplayChangedHandling **) 0 ;
  adlx::IADLXDisplayChangedHandling *result = 0 ;
  
  arg1 = (adlx::IADLXDisplayChangedHandling **)jarg1; 
  result = (adlx::IADLXDisplayChangedHandling *)displayChangeHandlP_Ptr_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_gpuListP_Ptr() {
  void * jresult ;
  adlx::IADLXGPUList **result = 0 ;
  
  result = (adlx::IADLXGPUList **)new_gpuListP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_gpuListP_Ptr(void * jarg1) {
  void * jresult ;
  adlx::IADLXGPUList *arg1 = (adlx::IADLXGPUList *) 0 ;
  adlx::IADLXGPUList **result = 0 ;
  
  arg1 = (adlx::IADLXGPUList *)jarg1; 
  result = (adlx::IADLXGPUList **)copy_gpuListP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_gpuListP_Ptr(void * jarg1) {
  adlx::IADLXGPUList **arg1 = (adlx::IADLXGPUList **) 0 ;
  
  arg1 = (adlx::IADLXGPUList **)jarg1; 
  delete_gpuListP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpuListP_Ptr_assign(void * jarg1, void * jarg2) {
  adlx::IADLXGPUList **arg1 = (adlx::IADLXGPUList **) 0 ;
  adlx::IADLXGPUList *arg2 = (adlx::IADLXGPUList *) 0 ;
  
  arg1 = (adlx::IADLXGPUList **)jarg1; 
  arg2 = (adlx::IADLXGPUList *)jarg2; 
  gpuListP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpuListP_Ptr_value(void * jarg1) {
  void * jresult ;
  adlx::IADLXGPUList **arg1 = (adlx::IADLXGPUList **) 0 ;
  adlx::IADLXGPUList *result = 0 ;
  
  arg1 = (adlx::IADLXGPUList **)jarg1; 
  result = (adlx::IADLXGPUList *)gpuListP_Ptr_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_gpuP_Ptr() {
  void * jresult ;
  adlx::IADLXGPU **result = 0 ;
  
  result = (adlx::IADLXGPU **)new_gpuP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_gpuP_Ptr(void * jarg1) {
  void * jresult ;
  adlx::IADLXGPU *arg1 = (adlx::IADLXGPU *) 0 ;
  adlx::IADLXGPU **result = 0 ;
  
  arg1 = (adlx::IADLXGPU *)jarg1; 
  result = (adlx::IADLXGPU **)copy_gpuP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_gpuP_Ptr(void * jarg1) {
  adlx::IADLXGPU **arg1 = (adlx::IADLXGPU **) 0 ;
  
  arg1 = (adlx::IADLXGPU **)jarg1; 
  delete_gpuP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpuP_Ptr_assign(void * jarg1, void * jarg2) {
  adlx::IADLXGPU **arg1 = (adlx::IADLXGPU **) 0 ;
  adlx::IADLXGPU *arg2 = (adlx::IADLXGPU *) 0 ;
  
  arg1 = (adlx::IADLXGPU **)jarg1; 
  arg2 = (adlx::IADLXGPU *)jarg2; 
  gpuP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpuP_Ptr_value(void * jarg1) {
  void * jresult ;
  adlx::IADLXGPU **arg1 = (adlx::IADLXGPU **) 0 ;
  adlx::IADLXGPU *result = 0 ;
  
  arg1 = (adlx::IADLXGPU **)jarg1; 
  result = (adlx::IADLXGPU *)gpuP_Ptr_value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_charP_Ptr() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)new_charP_Ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_charP_Ptr(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char **)copy_charP_Ptr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_charP_Ptr(void * jarg1) {
  char **arg1 = (char **) 0 ;
  
  arg1 = (char **)jarg1; 
  delete_charP_Ptr(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_charP_Ptr_assign(void * jarg1, char * jarg2) {
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char **)jarg1; 
  arg2 = (char *)jarg2; 
  charP_Ptr_assign(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_charP_Ptr_value(void * jarg1) {
  char * jresult ;
  char **arg1 = (char **) 0 ;
  char *result = 0 ;
  
  arg1 = (char **)jarg1; 
  result = (char *)charP_Ptr_value(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT adlx::IADLXInterface * SWIGSTDCALL CSharp_IADLXList_SWIGUpcast(adlx::IADLXList *jarg1) {
    return (adlx::IADLXInterface *)jarg1;
}

SWIGEXPORT adlx::IADLXInterface * SWIGSTDCALL CSharp_IADLXDisplay_SWIGUpcast(adlx::IADLXDisplay *jarg1) {
    return (adlx::IADLXInterface *)jarg1;
}

SWIGEXPORT adlx::IADLXList * SWIGSTDCALL CSharp_IADLXDisplayList_SWIGUpcast(adlx::IADLXDisplayList *jarg1) {
    return (adlx::IADLXList *)jarg1;
}

SWIGEXPORT adlx::IADLXInterface * SWIGSTDCALL CSharp_IADLXDisplayChangedHandling_SWIGUpcast(adlx::IADLXDisplayChangedHandling *jarg1) {
    return (adlx::IADLXInterface *)jarg1;
}

SWIGEXPORT adlx::IADLXInterface * SWIGSTDCALL CSharp_IADLXDisplayServices_SWIGUpcast(adlx::IADLXDisplayServices *jarg1) {
    return (adlx::IADLXInterface *)jarg1;
}

SWIGEXPORT adlx::IADLXInterface * SWIGSTDCALL CSharp_IADLXGPU_SWIGUpcast(adlx::IADLXGPU *jarg1) {
    return (adlx::IADLXInterface *)jarg1;
}

SWIGEXPORT adlx::IADLXList * SWIGSTDCALL CSharp_IADLXGPUList_SWIGUpcast(adlx::IADLXGPUList *jarg1) {
    return (adlx::IADLXList *)jarg1;
}

SWIGEXPORT adlx::IADLXInterface * SWIGSTDCALL CSharp_IADLXGPUsChangedHandling_SWIGUpcast(adlx::IADLXGPUsChangedHandling *jarg1) {
    return (adlx::IADLXInterface *)jarg1;
}

#ifdef __cplusplus
}
#endif

